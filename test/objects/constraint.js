const addon = require('../../')
const Faker = require('faker')

describe('MPConstraint creation', async () => {
  it(`Solver should makeRowConstraint() returning valid MPConstraint`, async () => {
    const min = Faker.random.number()
    const max = Faker.random.number({ min })
    const solver = new addon.MPSolver('', addon.MPSolver.CBC_MIXED_INTEGER_PROGRAMMING)
    const constraint = solver.makeRowConstraint(min, max)
    expect(constraint).to.be.a('MPConstraint')
  })
  it(`Solver MPObjective should be able to setCoefficient()`, async () => {
    const min = Faker.random.number()
    const max = Faker.random.number({ min })
    const solver = new addon.MPSolver('', addon.MPSolver.CBC_MIXED_INTEGER_PROGRAMMING)
    const constraint = solver.makeRowConstraint(min, max)
    const x = solver.makeIntVar(0, 5, 'variable')
    constraint.setCoefficient(x, 1)
  })
})
describe('MPConstraint methods sanity', async () => {
  it(`Solver MPConstraint setCoefficient() sanity check`, async () => {
    const min = Faker.random.number()
    const max = Faker.random.number({ min })
    const solver = new addon.MPSolver('', addon.MPSolver.CBC_MIXED_INTEGER_PROGRAMMING)
    const constraint = solver.makeRowConstraint(min, max)
    const x = solver.makeIntVar(0, 1, '')
    expect(() => constraint.setCoefficient()).to.throw()
    expect(() => constraint.setCoefficient(1)).to.throw()
    expect(() => constraint.setCoefficient({ }, 1)).to.throw(TypeError)
    expect(() => constraint.setCoefficient(null, null)).to.throw(TypeError)
    expect(() => constraint.setCoefficient(23, null)).to.throw(TypeError)
    expect(() => constraint.setCoefficient(23, 'null')).to.throw(TypeError)
    expect(() => constraint.setCoefficient('null', 'null')).to.throw(TypeError)
    expect(() => constraint.setCoefficient('null', 3)).to.throw(TypeError)
    expect(() => constraint.setCoefficient('null', 3)).to.throw(TypeError)
    expect(() => constraint.setCoefficient(x, 3)).to.not.throw()
  })
})
